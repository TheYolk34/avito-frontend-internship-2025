# Мини-версия системы управления проектами (Project Management System)

Проект разработан в рамках тестового задания для стажёра Frontend-направления (весенняя волна 2025) компании Avito. Это мини-версия системы управления проектами, которая позволяет создавать, редактировать и просматривать задачи и доски проектов.

## Технологический стек

- **React 18** — основной фреймворк для разработки интерфейса.
- **TypeScript** — для типизации кода и повышения его надёжности.
- **React Router DOM** — для маршрутизации между страницами.
- **Material-UI (MUI)** — библиотека UI-компонентов для быстрого создания интерфейса.
- **React Query** — для управления асинхронными запросами к API.
- **Vite** — инструмент сборки проекта, обеспечивающий быструю разработку и сборку.
- **Docker** и **Docker Compose** — для контейнеризации и упрощения запуска приложения.
- **Jest** и **React Testing Library** — для написания и запуска unit-тестов.

## Инструкция по запуску

### Локальный запуск (без Docker)

1. **Клонируйте репозиторий**:

   ```bash
   git clone <ссылка_на_репозиторий>
   cd avito-frontend-internship-2025
   ```

2. **Запустите сервер (бэкенд)**:

   ```bash
   cd server
   go run cmd/service/main.go
   ```

   Сервер будет запущен на порту `8080`.

3. **Запустите клиент (фронтенд)**: Откройте новую вкладку терминала и выполните:

   ```bash
   cd client
   npm install
   npm run dev -- --force
   ```

   Фронтенд будет доступен по адресу `http://localhost:3000`.

### Запуск с помощью Docker и Docker Compose

1. **Убедитесь, что у вас установлены Docker и Docker Compose**:

   - Инструкция по установке Docker
   - Инструкция по установке Docker Compose

2. **Запустите проект**: В корневой папке проекта выполните:

   ```bash
   docker-compose up --build
   ```

   - Бэкенд будет запущен на порту `8080`.
   - Фронтенд будет доступен по адресу `http://localhost:5173`.

3. **Остановка контейнеров**: Для остановки выполните:

   ```bash
   docker-compose down
   ```

## Доступные страницы

- `/boards` — страница со списком всех досок.
- `/boards/:id` — страница конкретной доски с задачами, разделёнными по статусам ("To do", "In progress", "Done").
- `/issues` — страница со списком всех задач с возможностью фильтрации и поиска.

## Функциональность

- **Header для навигации**: В верхней части страницы доступен header с кнопками для перехода на страницы "Список всех задач" (`/issues`), "Список досок" (`/boards`) и кнопкой "Создать задачу" для открытия формы создания задачи.
- **Просмотр всех задач**: На странице `/issues` отображаются все задачи с возможностью фильтрации по статусу, доске, поиску по названию задачи и исполнителю.
- **Просмотр всех досок и переход**: На странице `/boards` отображается список всех досок с возможностью перехода на страницу конкретной доски.
- **Создание и редактирование задач**: Форма создания/редактирования задачи открывается в модальном окне с поддержкой предзаполненных полей (название, описание, приоритет, статус, исполнитель, доска). Форма доступна через header, на странице всех задач и на странице доски.
- **Сохранение черновика формы**: Данные формы создания/редактирования задачи сохраняются в черновик при перезагрузке страницы, что позволяет продолжить заполнение после возвращения.
- **Переход с детальным просмотром**: Со страницы всех задач можно перейти на страницу доски с автоматическим открытием модального окна редактирования выбранной задачи с предзаполненными полями.
- **Drag-and-Drop на странице доски**: На странице доски задачи можно перетаскивать между столбцами ("To do", "In progress", "Done"), что автоматически обновляет статус задачи без перезагрузки страницы.

## Обоснование выбора необязательных технологий

- **TypeScript**: Использовал для строгой типизации, что упрощает отладку и снижает количество ошибок в коде, особенно при работе с формами и API-запросами.
- **Material-UI (MUI)**: Выбрал для быстрого создания интерфейса с готовыми компонентами, такими как модальные окна, `Autocomplete` для выбора исполнителя и доски, и `ToggleButton` для статусов и приоритетов, которые легко кастомизировать через `sx`-проп.
- **React Query**: Использовал для управления запросами к API, что упростило работу с асинхронными данными и их кэшированием. Также `react-query` поддерживает автоматическую отмену запросов при переходе между страницами, что предотвращает утечки памяти и улучшает производительность.
- **Vite**: Выбрал для быстрой разработки и сборки проекта, так как он обеспечивает высокую производительность по сравнению с другими инструментами, что особенно полезно при частых обновлениях UI.
- **Docker и Docker Compose**: Использовал для контейнеризации приложения, чтобы упростить запуск и тестирование на разных машинах, гарантируя одинаковую среду для сервера и клиента.
- **Jest и React Testing Library**: Добавил для покрытия кода unit-тестами, что позволяет проверять корректность работы компонентов (например, формы, фильтров) и логики (например, drag-and-drop).

## Тестирование и документация

- **Unit-тесты**: Проект включает unit-тесты, написанные с использованием `Jest` и `React Testing Library`. Тесты покрывают ключевые компоненты (формы, модальные окна, фильтры) и функциональность (drag-and-drop, сохранение черновика).
- **Комментарии и документация**: Код содержит комментарии для сложных участков (например, логика drag-and-drop, работа с `react-query`), а также документацию в виде JSDoc для основных функций и компонентов.

## Описание

#### Список задач

Страница со списком всех задач, где можно открыть задачу для редактирования в модальном окне или перейти на её доску. Доступны поля для поиска по названию задачи и исполнителю, а также фильтрация через кнопку `Фильтры`, которая открывает модальное окно с выбором статуса и доски. Фильтры применяются кнопкой `Применить фильтры`, а сброс настроек — кнопкой `Сбросить`.

![Страница всех задач](assets/tasks.png)
![Страница всех задач - фильтры](assets/filters.png)

#### Список всех досок

На этой странице представлены все доступные доски с указанием процента выполнения задач для каждой из них. Клик по кнопке `Посмотреть доску` перенаправляет на её страницу.

![Страница всех досок](assets/boards.png)

#### Страница доски

На странице конкретной доски отображаются задачи, распределённые по статусам в трёх столбцах: "To do", "In progress" и "Done". Для редактирования задачи нужно нажать на неё, после чего откроется модальное окно с формой редактирования. Изменение статуса задачи возможно через drag-and-drop: достаточно перетащить задачу в нужный столбец.

![Страница одной доски](assets/board.png)

#### Создание задачи

Кнопка `Создать задачу`, расположенная в хэдере или на странице всех задач, открывает модальное окно для заполнения данных. В форме нужно указать название задачи, её описание, выбрать доску, к которой она будет привязана, а также определить приоритет и исполнителя.
На форме была добавлена кнопка `Очистить` для возможности быстро убрать содержимое всех полей из черновика.

![Форма создания задачи](assets/create.png)

#### Редактирование задачи

Нажатие на кнопку `Редактировать Задачу` (на странице доски или в списке всех задач) открывает модальное окно с формой для редактирования. В форме можно обновить название, описание, статус, приоритет и исполнителя. Если редактирование происходит на странице всех задач, доступна кнопка для перехода на страницу доски, к которой относится задача.

![Форма редактирования задачи](assets/edit.png)

